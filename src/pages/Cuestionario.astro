---
import Layout from '../layouts/Layout.astro';
import Question from '../components/Question.astro';

const preguntas = [
    {
        id: "1",
        pregunta: "¿Cuál es la mejor práctica para crear contraseñas seguras?",
        respuestas: [
            "Usar la misma contraseña para todas las cuentas",
            "Incluir información personal fácil de recordar",
            "Combinar letras mayúsculas, minúsculas, números y símbolos",
            "Guardar todas las contraseñas en un archivo de texto"
        ],
        correcta: 2
    }
];

const preguntaActual = preguntas[0]; 
---

<Layout title="Cuestionario">
    <section class="relative min-h-screen w-full overflow-hidden">
        <div class="bg-[url(/src/assets/images/main-background.jpg)] bg-cover bg-center bg-no-repeat bg-fixed absolute inset-0 w-full h-full">
        </div>
        <div class="absolute inset-0 bg-black/70 backdrop-blur-sm"></div>
        
        <div class="flex flex-col items-center justify-center min-h-screen p-4 relative z-10">
            <div class="mb-8 text-center">
                <h1 class="text-3xl font-bold text-white mb-2">Cuestionario de Ciberseguridad</h1>
                <p class="text-white/80">Responde correctamente las siguientes preguntas</p>
            </div>
            
            <div id="questions-wrapper">
                <div id="question-container" class="w-full max-w-3xl">
                    <Question 
                        id={preguntaActual.id}
                        pregunta={preguntaActual.pregunta}
                        respuestas={preguntaActual.respuestas}
                        correcta={preguntaActual.correcta}
                    />
                </div>
                
                <div class="w-full max-w-3xl p-4 bg-gray-900/50 rounded-b-lg flex justify-between items-center">
                    <button type="button" id="prev-btn" class="nav-btn px-5 py-2 bg-gray-700 hover:bg-gray-600 rounded-md shadow-md transition-all duration-300 text-white">
                        Anterior
                    </button>
                    <div class="text-white/70 text-sm">Pregunta <span id="current-question">1</span> de <span id="total-questions">1</span></div>
                    <button type="button" id="next-btn" class="nav-btn px-5 py-2 bg-blue-700 hover:bg-blue-800 rounded-md shadow-md transition-all duration-300 text-white">
                        Siguiente
                    </button>
                </div>
            </div>
            
            <div class="w-full max-w-3xl mt-6">
                <div class="bg-gray-700 h-2 rounded-full overflow-hidden">
                    <div id="progress-bar" class="bg-blue-500 h-full transition-all duration-300" style="width: 0%"></div>
                </div>
            </div>
        </div>
        
        <div class="watermark-container">
            <div class="watermark">labsystec.net</div>
        </div>
    </section>
</Layout>

<style>
    .watermark-container {
        position: absolute;
        bottom: 1rem;
        right: 1rem;
        z-index: 20;
        width: 140px;
        height: 40px;
        overflow: hidden;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 4px;
    }
    
    .watermark {
        font-size: 0.875rem;
        font-weight: 500;
        color: rgba(255, 255, 255, 0);
        transition: all 0.5s ease;
        transform: translateY(30px);
        opacity: 0;
    }
    
    .watermark-container:hover .watermark {
        color: rgba(255, 255, 255, 0.8);
        transform: translateY(0);
        opacity: 1;
    }
    
    .nav-btn:active {
        transform: scale(0.98);
    }
</style>

<script>
    // const API_URL = 'https://localhost:7148/api/';
    const API_URL = 'https://quest-cyb.labsystec.net/api/'; 
    interface Pregunta {
        id: string;
        pregunta: string;
        respuestas: string[];
        correcta: number;
    }
    
    interface RespuestaUsuario {
        questionId: string;
        answerIndex: number;
    }
    
    interface RespuestasDTO {
        IdCuestionario: string;
        RespuestasSerialized: string;
        UserMail: string;
    }
    
    let currentQuestionIndex = 0;
    let preguntasData: Pregunta[] = [];
    let totalQuestions = 1;
    let userResponses: RespuestaUsuario[] = [];
    
    function createQuestionElement(pregunta: Pregunta): HTMLElement {
        const questionEl = document.createElement('div');
        questionEl.id = `question-${pregunta.id}`;
        questionEl.className = 'question-card w-full max-w-3xl bg-gray-800/90 backdrop-blur-sm rounded-lg shadow-xl overflow-hidden transition-all duration-500 transform';
        
        if (!pregunta || !pregunta.respuestas || !Array.isArray(pregunta.respuestas)) {
            console.error('La pregunta no tiene un formato válido:', pregunta);
            
            questionEl.innerHTML = `
                <div class="p-6 border-b border-gray-700">
                    <h3 class="text-2xl font-semibold text-white mb-2">${pregunta?.pregunta || 'Pregunta no disponible'}</h3>
                </div>
                <div class="p-6">
                    <div class="flex flex-col space-y-3">
                        <div class="p-4 bg-red-700/80 rounded-md">
                            <span class="text-white">Error: No se pudieron cargar las opciones de respuesta</span>
                        </div>
                    </div>
                </div>
            `;
            
            return questionEl;
        }
        
        questionEl.innerHTML = `
            <div class="p-6 border-b border-gray-700">
                <h3 class="text-2xl font-semibold text-white mb-2">${pregunta.pregunta}</h3>
            </div>
            
            <div class="p-6">
                <div class="flex flex-col space-y-3">
                    ${pregunta.respuestas.map((respuesta, index) => `
                        <label class="option-container relative">
                            <input 
                                type="radio" 
                                name="question-${pregunta.id}" 
                                value="${index}" 
                                class="hidden peer"
                                ${getUserResponseForQuestion(pregunta.id) === index ? 'checked' : ''}
                            />
                            <div class="p-4 bg-gray-700/80 rounded-md cursor-pointer transition-all duration-300 
                                        border-2 border-transparent hover:border-blue-500 
                                        peer-checked:bg-blue-600 peer-checked:border-blue-400 peer-checked:shadow-lg">
                                <span class="text-white">${respuesta}</span>
                            </div>
                        </label>
                    `).join('')}
                </div>
            </div>
        `;
        
        setTimeout(() => {
            const options = questionEl.querySelectorAll('input[type="radio"]');
            options.forEach(option => {
                option.addEventListener('change', (e) => {
                    const target = e.target as HTMLInputElement;
                    const selectedValue = parseInt(target.value);
                    
                    saveUserResponse(pregunta.id, selectedValue);
                    
                    const event = new CustomEvent('answer-selected', {
                        bubbles: true,
                        detail: { 
                            questionId: pregunta.id, 
                            selectedAnswer: selectedValue
                        }
                    });
                    questionEl.dispatchEvent(event);
                });
            });
        }, 0);
        
        return questionEl;
    }
    
    function getUserResponseForQuestion(questionId: string): number | null {
        const response = userResponses.find(r => r.questionId === questionId);
        return response ? response.answerIndex : null;
    }
    
    function saveUserResponse(questionId: string, answerIndex: number): void {
        const existingIndex = userResponses.findIndex(r => r.questionId === questionId);
        
        if (existingIndex >= 0) {
            userResponses[existingIndex].answerIndex = answerIndex;
        } else {
            userResponses.push({
                questionId: questionId,
                answerIndex: answerIndex
            });
        }
        
        localStorage.setItem('userResponses', JSON.stringify(userResponses));
    }
    
    function mostrarPregunta(index: number): void {
        if (index < 0 || index >= preguntasData.length) return;
        
        const container = document.getElementById('question-container');
        if (!container) return;
        
        container.innerHTML = '';
        
        const preguntaEl = createQuestionElement(preguntasData[index]);
        container.appendChild(preguntaEl);
        
        updateNavigation(index);
    }
    
    function updateNavigation(index: number): void {
        const prevBtn = document.getElementById('prev-btn') as HTMLButtonElement;
        const nextBtn = document.getElementById('next-btn') as HTMLButtonElement;
        const progressBar = document.getElementById('progress-bar') as HTMLDivElement;
        const currentQuestionSpan = document.getElementById('current-question');
        const totalQuestionsSpan = document.getElementById('total-questions');
        
        if (!prevBtn || !nextBtn || !progressBar || !currentQuestionSpan || !totalQuestionsSpan) return;
        
        currentQuestionSpan.textContent = (index + 1).toString();
        totalQuestionsSpan.textContent = totalQuestions.toString();
        
        const progress = ((index + 1) / totalQuestions) * 100;
        progressBar.style.width = `${progress}%`;
        
        prevBtn.disabled = index === 0;
        prevBtn.classList.toggle('opacity-50', index === 0);
        prevBtn.classList.toggle('cursor-not-allowed', index === 0);
        
        nextBtn.textContent = index === totalQuestions - 1 ? 'Finalizar' : 'Siguiente';
    }
    
    function cargarPreguntas(): void {
        try {
            preguntasData = [];
            
            const preguntasParsed = sessionStorage.getItem('preguntasParsed');
            if (preguntasParsed) {
                try {
                    const parsedData = JSON.parse(preguntasParsed);
                    if (Array.isArray(parsedData) && parsedData.length > 0) {
                        preguntasData = parsedData;
                        console.log("Preguntas cargadas desde preguntasParsed:", preguntasData);
                        
                        initializarCuestionario();
                        return;
                    }
                } catch (e) {
                    console.error("Error al parsear preguntasParsed:", e);
                }
            }
            
            const storedPreguntas = sessionStorage.getItem('cuestionarioPreguntas');
            if (storedPreguntas) {
                try {
                    const parsedData = JSON.parse(storedPreguntas);
                    console.log(parsedData);
                    parsedData.forEach((pregunta: any) => {
                        console.log("Pregunta:", pregunta);
                    });
                    if (Array.isArray(parsedData) && parsedData.length > 0 && 
                        typeof parsedData[0].pregunta === 'string' && 
                        Array.isArray(parsedData[0].respuestas)) {
                        
                        preguntasData = parsedData;
                        console.log("Preguntas cargadas y parseadas correctamente:", preguntasData);
                        initializarCuestionario();
                        return;
                    } else {
                        console.warn("Los datos en sessionStorage no son un array válido de preguntas");
                        usarPreguntasPredeterminadas();
                    }
                } catch (e) {
                    console.error("Error al parsear cuestionarioPreguntas:", e);
                    
                    try {
                        const doubleParseData = JSON.parse(JSON.parse(storedPreguntas));
                        if (Array.isArray(doubleParseData) && doubleParseData.length > 0) {
                            preguntasData = doubleParseData;
                            console.log("Preguntas cargadas con doble parsing:", preguntasData);
                            initializarCuestionario();
                            return;
                        } else {
                            usarPreguntasPredeterminadas();
                        }
                    } catch (e2) {
                        console.error("Error en el doble parsing:", e2);
                        usarPreguntasPredeterminadas();
                    }
                }
            } else {
                console.log("No hay preguntas en sessionStorage");
                usarPreguntasPredeterminadas();
            }
            
            initializarCuestionario();
        } catch (error) {
            console.error("Error al cargar preguntas:", error);
            usarPreguntasPredeterminadas();
            initializarCuestionario();
        }
    }
    
    function initializarCuestionario(): void {
        if (!preguntasData || !Array.isArray(preguntasData) || preguntasData.length === 0) {
            console.warn("No se pudieron cargar preguntas, usando fallback");
            usarPreguntasPredeterminadas();
        }
        
        totalQuestions = preguntasData.length;
        console.log(`Total de preguntas: ${totalQuestions}`);
        
        const savedResponses = localStorage.getItem('userResponses');
        if (savedResponses) {
            try {
                userResponses = JSON.parse(savedResponses);
            } catch (e) {
                console.error("Error al cargar respuestas guardadas:", e);
                userResponses = [];
            }
        }
        
        mostrarPregunta(0);
        
        setupNavigation();
    }
    
    function usarPreguntasPredeterminadas(): void {
        console.log("Usando preguntas predeterminadas");
        preguntasData = [
            {
                id: "1",
                pregunta: "¿Cuál es la mejor práctica para crear contraseñas seguras?",
                respuestas: [
                    "Usar la misma contraseña para todas las cuentas",
                    "Incluir información personal fácil de recordar",
                    "Combinar letras mayúsculas, minúsculas, números y símbolos",
                    "Guardar todas las contraseñas en un archivo de texto"
                ],
                correcta: 2
            },
            {
                id: "2",
                pregunta: "¿Qué es el phishing?",
                respuestas: [
                    "Un tipo de ataque donde se engaña al usuario",
                    "Un programa antivirus",
                    "Una técnica de programación",
                    "Un método de encriptación"
                ],
                correcta: 0
            },
            {
                id: "3",
                pregunta: "¿Cuál de estas prácticas mejora la seguridad?",
                respuestas: [
                    "Compartir contraseñas con amigos",
                    "Usar autenticación de dos factores",
                    "Descargar software de fuentes no oficiales",
                    "Mantener el mismo software sin actualizar"
                ],
                correcta: 1
            }
        ];
        
        console.log("Preguntas predeterminadas cargadas:", preguntasData);
    }
    
    function setupNavigation(): void {
        const prevBtn = document.getElementById('prev-btn');
        const nextBtn = document.getElementById('next-btn');
        
        if (!prevBtn || !nextBtn) return;
        
        prevBtn.addEventListener('click', () => {
            if (currentQuestionIndex > 0) {
                currentQuestionIndex--;
                mostrarPregunta(currentQuestionIndex);
            }
        });
        
        nextBtn.addEventListener('click', () => {
            if (currentQuestionIndex < totalQuestions - 1) {
                currentQuestionIndex++;
                mostrarPregunta(currentQuestionIndex);
            } else {
                finalizarCuestionario();
            }
        });
        
        document.addEventListener('answer-selected', (event) => {
            const customEvent = event as CustomEvent<{
                questionId: string;
                selectedAnswer: number;
            }>;
            
            if (customEvent.detail) {
                console.log(`Respuesta seleccionada: ${customEvent.detail.selectedAnswer} para pregunta ${customEvent.detail.questionId}`);
            }
        });
    }
    
    function allQuestionsAnswered(): boolean {
        if (userResponses.length < preguntasData.length) {
            return false;
        }
        
        for (const pregunta of preguntasData) {
            const hasResponse = userResponses.some(resp => resp.questionId === pregunta.id);
            if (!hasResponse) {
                return false;
            }
        }
        
        return true;
    }
    
    function prepararRespuestasDTO(): RespuestasDTO {
        const questToken = sessionStorage.getItem('questToken') || '';
        
        const userMail = sessionStorage.getItem('email') || '';
        
        const respuestasFormatted = userResponses.map(response => ({
            preguntaId: response.questionId,
            respuesta: response.answerIndex
        }));
        
        return {
            IdCuestionario: questToken,
            RespuestasSerialized: JSON.stringify(respuestasFormatted),
            UserMail: userMail
        };
    }
    
    function finalizarCuestionario() {
        if (!allQuestionsAnswered()) {
            alert("Debes responder todas las preguntas");
            return;
        }
        
        const respuestasDTO = prepararRespuestasDTO();
        
        console.log("Enviando respuestas:", respuestasDTO);
        
        localStorage.setItem('cuestionarioCompletado', 'true');
        localStorage.setItem('fechaFinalizacion', new Date().toISOString());
        localStorage.setItem('respuestasEnviadas', JSON.stringify(respuestasDTO));
        
        fetch(API_URL + 'Values/SendRespuestas', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(respuestasDTO)
        })
        .then(response => response.json())
        .then(data => {
            if(data.message){
                    alert(data.message);
                    
                    localStorage.clear();
                    sessionStorage.clear();
                    
                    window.location.href = '/Agradecimiento';
                } else {
                    alert(data.error);
            }
            
        })
        .catch(error => {
            console.error("Error al enviar respuestas:", error);
            alert("Hubo un error al enviar las respuestas.");
        });
        
        console.log(respuestasDTO);
    }
    
    document.addEventListener('DOMContentLoaded', () => {
        const questToken = sessionStorage.getItem('questToken') || '';
        if (!questToken) {
            window.location.href = '/';
            return;
        }
        
        cargarPreguntas();
    });
    
    function extraerPreguntas(data: any): Pregunta[] | null {
        if (Array.isArray(data) && data.length > 0 && 
            typeof data[0].pregunta === 'string' && 
            Array.isArray(data[0].respuestas)) {
            return data as Pregunta[];
        }
        
        if (typeof data === 'string') {
            try {
                const parsed = JSON.parse(data);
                return extraerPreguntas(parsed);
            } catch (e) {
                console.error("Error al parsear string:", e);
                return null;
            }
        }
        
        if (data && typeof data === 'object' && typeof data.cuestionarioSerializado === 'string') {
            try {
                const parsed = JSON.parse(data.cuestionarioSerializado);
                return extraerPreguntas(parsed);
            } catch (e) {
                console.error("Error al parsear cuestionarioSerializado:", e);
                return null;
            }
        }
        
        console.error("Formato de datos no reconocido:", data);
        return null;
    }
</script>